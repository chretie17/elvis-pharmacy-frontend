import React, { useState, useEffect } from 'react';
import { Button, Typography, Box, Paper, CircularProgress, Divider, TextField } from '@mui/material';
import { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import api from '../api';
import logo from '../assets/pharamcy.jpg';

export default function FinancialReport() {
    const [summary, setSummary] = useState(null);
    const [breakdown, setBreakdown] = useState([]);
    const [loading, setLoading] = useState(true);
    const [generatedTime, setGeneratedTime] = useState('');
    const [selectedDate, setSelectedDate] = useState(null);

    useEffect(() => {
        fetchOverallData();
        setGeneratedTime(new Date().toLocaleString());
    }, []);

    const fetchOverallData = async () => {
        try {
            const summaryResponse = await api.get('/reports/summary');
            const breakdownResponse = await api.get('/reports/insurance-breakdown');
            setSummary(summaryResponse.data);
            setBreakdown(breakdownResponse.data);
        } catch (error) {
            console.error('Error fetching financial data', error);
        } finally {
            setLoading(false);
        }
    };

    const fetchDailyReport = async (date) => {
        try {
            const formattedDate = date.format('YYYY-MM-DD');
            const response = await api.get(`/reports/daily/${formattedDate}`);
            const { results, summary } = response.data;

            const aggregatedData = aggregateInsuranceData(results);

            setSummary(summary);
            setBreakdown(aggregatedData);
        } catch (error) {
            console.error('Error fetching daily report', error);
        }
    };

    const aggregateInsuranceData = (data) => {
        const insuranceMap = {};

        data.forEach((item) => {
            if (!insuranceMap[item.insurance_name]) {
                insuranceMap[item.insurance_name] = {
                    insurance_name: item.insurance_name,
                    totalPatients: 0,
                    totalCosts: 0,
                    totalFinalCosts: 0,
                    totalToClaimFromInsurance: 0,
                };
            }

            const insurance = insuranceMap[item.insurance_name];
            insurance.totalPatients += 1;
            insurance.totalCosts += parseFloat(item.total_cost);
            insurance.totalFinalCosts += parseFloat(item.final_cost);
            insurance.totalToClaimFromInsurance += parseFloat(item.total_cost) - parseFloat(item.final_cost);
        });

        return Object.values(insuranceMap);
    };

    const downloadOverallPDF = () => {
        generatePDF('Overall Financial Report');
    };

    const downloadDailyPDF = () => {
        generatePDF('Daily Financial Report');
    };

    const generatePDF = (title) => {
        const pdf = new jsPDF('p', 'mm', 'a4');

        // Add Logo
        pdf.addImage(logo, 'PNG', 10, 10, 30, 30);

        // Title
        pdf.setFontSize(22);
        pdf.setTextColor(40);
        pdf.setFont('Helvetica', 'bold');
        pdf.text(title, 105, 20, null, null, 'center');

        // Subtitle
        pdf.setFontSize(14);
        pdf.setTextColor(60);
        pdf.setFont('Helvetica', 'normal');
        pdf.text('Detailed Financial Summary and Insurance Breakdown', 105, 28, null, null, 'center');

        // Generated Time
        pdf.setFontSize(10);
        pdf.text(`Generated on: ${generatedTime}`, 200, 35, null, null, 'right');

        // Admin Role
        pdf.text('Generated by: Admin', 200, 40, null, null, 'right');

        // Add a separator line
        pdf.setLineWidth(0.5);
        pdf.setDrawColor(100);
        pdf.line(15, 45, 195, 45);

        // Summary Table
        pdf.setFontSize(16);
        pdf.text('Summary', 15, 52);
        pdf.autoTable({
            startY: 55,
            head: [['Description', 'Amount']],
            body: [
                ['Total Costs', summary?.totalCosts || 'N/A'],
                ['Total Final Costs', summary?.totalFinalCosts || 'N/A'],
                ['Total to Claim from Insurance', summary?.totalToClaimFromInsurance || 'N/A'],
            ],
            theme: 'striped',
            headStyles: { fillColor: [22, 160, 133] },
            styles: { fontSize: 12 },
        });

        // Insurance Breakdown
        pdf.setFontSize(16);
        pdf.text('Insurance Breakdown', 15, pdf.lastAutoTable.finalY + 20);
        pdf.autoTable({
            startY: pdf.lastAutoTable.finalY + 25,
            head: [['Insurance', 'Total Patients', 'Total Costs', 'Total Final Costs', 'Total to Claim']],
            body: breakdown.map(item => [
                item.insurance_name || 'N/A',
                item.totalPatients || '0',
                item.totalCosts.toFixed(2) || '0.00',
                item.totalFinalCosts.toFixed(2) || '0.00',
                item.totalToClaimFromInsurance.toFixed(2) || '0.00',
            ]),
            theme: 'striped',
            headStyles: { fillColor: [22, 160, 133] },
            styles: { fontSize: 12 },
        });

        // Add a final section with a disclaimer
        pdf.setFontSize(10);
        pdf.text(
            "Disclaimer: This report is confidential and intended solely for the insurance company or the pharmacy owner. Any unauthorized use, disclosure, or distribution is prohibited.",
            15,
            pdf.internal.pageSize.height - 10,
            { maxWidth: 180, align: "center" }
        );

        // Save the PDF
        pdf.save(`${title.toLowerCase().replace(/ /g, '-')}.pdf`);
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
                <CircularProgress />
            </Box>
        );
    }

    return (
        <LocalizationProvider dateAdapter={AdapterDayjs}>
            <Box id="financial-report" sx={{ padding: 4, backgroundColor: '#f4f4f9', minHeight: '100vh' }}>
                {/* Title Section */}
                <Box display="flex" justifyContent="space-between" alignItems="center" marginBottom={3}>
                    <img src={logo} alt="Logo" style={{ height: 50 }} />
                    <Box textAlign="center">
                        <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', color: '#004d40' }}>
                            Comprehensive Financial Report
                        </Typography>
                        <Typography variant="subtitle1" gutterBottom sx={{ color: '#666' }}>
                            Detailed Financial Summary and Insurance Breakdown
                        </Typography>
                    </Box>
                    <Box textAlign="right">
                        <Typography variant="caption" display="block" sx={{ color: '#999' }}>
                            Generated on: {generatedTime}
                        </Typography>
                        <Typography variant="caption" display="block" sx={{ color: '#999' }}>
                            Generated by: Admin
                        </Typography>
                    </Box>
                </Box>
                <Divider sx={{ marginY: 3 }} />

                {/* Date Picker Section */}
                <Box sx={{ marginBottom: 4 }}>
                    <DatePicker
                        label="Select Date for Daily Report"
                        value={selectedDate}
                        onChange={(newValue) => {
                            setSelectedDate(newValue);
                            fetchDailyReport(newValue);
                        }}
                        renderInput={(params) => <TextField {...params} fullWidth />}
                    />
                </Box>

                {/* Summary Section */}
                <Paper sx={{ padding: 4, marginBottom: 4, backgroundColor: '#f1f8e9', borderRadius: '8px' }}>
                    <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#2e7d32' }}>
                        Summary
                    </Typography>
                    <Box display="flex" justifyContent="space-between" marginTop={2}>
                        <Typography variant="body1">Total Costs:</Typography>
                        <Typography variant="body1">{summary?.totalCosts}</Typography>
                    </Box>
                    <Box display="flex" justifyContent="space-between" marginTop={1}>
                        <Typography variant="body1">Total Final Costs:</Typography>
                        <Typography variant="body1">{summary?.totalFinalCosts}</Typography>
                    </Box>
                    <Box display="flex" justifyContent="space-between" marginTop={1}>
                        <Typography variant="body1">Total to Claim from Insurance:</Typography>
                        <Typography variant="body1">{summary?.totalToClaimFromInsurance}</Typography>
                    </Box>
                </Paper>

                {/* Insurance Breakdown Section */}
                <Paper sx={{ padding: 4, backgroundColor: '#e0f7fa', borderRadius: '8px' }}>
                    <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: '#00796b' }}>
                        Insurance Breakdown
                    </Typography>
                    <ResponsiveContainer width="100%" height={400}>
                        <LineChart data={breakdown}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="insurance_name" />
                            <YAxis />
                            <Tooltip />
                            <Legend />
                            <Line type="monotone" dataKey="totalCosts" stroke="#8884d8" />
                            <Line type="monotone" dataKey="totalFinalCosts" stroke="#82ca9d" />
                            <Line type="monotone" dataKey="totalToClaimFromInsurance" stroke="#ff7300" />
                        </LineChart>
                    </ResponsiveContainer>
                </Paper>

                {/* Download Buttons */}
                <Box textAlign="center" marginTop={4} display="flex" justifyContent="space-around">
                    <Button
                        variant="contained"
                        color="primary"
                        onClick={downloadOverallPDF}
                        sx={{ backgroundColor: '#1976d2', '&:hover': { backgroundColor: '#1565c0' } }}
                    >
                        Download Overall Report PDF
                    </Button>
                    <Button
                        variant="contained"
                        color="secondary"
                        onClick={downloadDailyPDF}
                        sx={{ backgroundColor: '#d32f2f', '&:hover': { backgroundColor: '#c62828' } }}
                    >
                        Download Daily Report PDF
                    </Button>
                </Box>
            </Box>
        </LocalizationProvider>
    );
}
